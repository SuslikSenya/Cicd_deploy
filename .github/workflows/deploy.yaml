name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/your-username
  IMAGE_VERSION: 1.0.${{ github.run_number }}

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Publish Backend
        run: |
          cd src/CommunicationControl
          dotnet publish -c Release -o ./published DevOpsProject/DevOpsProject.CommunicationControl.API.csproj

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend
          path: src/CommunicationControl/published

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install and build frontend
        run: |
          cd src/MapClient
          npm ci
          npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: src/MapClient/dist

  docker-build-push:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & push backend
        run: |
          cd src/CommunicationControl
          docker build -t $REGISTRY/communication-control:${{ env.IMAGE_VERSION }} -f DevOpsProject/Dockerfile .
          docker push $REGISTRY/communication-control:${{ env.IMAGE_VERSION }}

      - name: Build & push frontend
        run: |
          cd src/MapClient
          docker build -t $REGISTRY/map-client:${{ env.IMAGE_VERSION }} .
          docker push $REGISTRY/map-client:${{ env.IMAGE_VERSION }}

  deploy-dev:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.CERTIFICATE_AUTHORITY_DATA }}" | base64 -d > /tmp/ca.crt
          kubectl config set-cluster dev-cluster --server=${{ secrets.DEV_KUB_SERVER }} --certificate-authority=/tmp/ca.crt --embed-certs=true
          kubectl config set-credentials dev-user --token=${{ secrets.DEV_KUB_USER_TOKEN }}
          kubectl config set-context dev-context --cluster=dev-cluster --user=dev-user
          kubectl config use-context dev-context

      - name: Deploy to Dev
        run: |
          kubectl set image deployment/com-control com-control=$REGISTRY/communication-control:${{ env.IMAGE_VERSION }}
          kubectl set image deployment/map-client map-client=$REGISTRY/map-client:${{ env.IMAGE_VERSION }}